// <auto-generated />
using System;
using CommunityApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommunityApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommunityApp.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<string>("ProvinceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceCode");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Vancouver",
                            Population = 675218,
                            ProvinceCode = "BC"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Victoria",
                            Population = 85792,
                            ProvinceCode = "BC"
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Kelowna",
                            Population = 144576,
                            ProvinceCode = "BC"
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Surrey",
                            Population = 568322,
                            ProvinceCode = "BC"
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Toronto",
                            Population = 2930000,
                            ProvinceCode = "ON"
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Ottawa",
                            Population = 1010000,
                            ProvinceCode = "ON"
                        },
                        new
                        {
                            CityId = 7,
                            CityName = "Mississauga",
                            Population = 721599,
                            ProvinceCode = "ON"
                        },
                        new
                        {
                            CityId = 8,
                            CityName = "Hamilton",
                            Population = 569353,
                            ProvinceCode = "ON"
                        },
                        new
                        {
                            CityId = 9,
                            CityName = "Edmonton",
                            Population = 981280,
                            ProvinceCode = "AB"
                        },
                        new
                        {
                            CityId = 10,
                            CityName = "Calgary",
                            Population = 1239000,
                            ProvinceCode = "AB"
                        },
                        new
                        {
                            CityId = 11,
                            CityName = "Red Deer",
                            Population = 103588,
                            ProvinceCode = "AB"
                        },
                        new
                        {
                            CityId = 12,
                            CityName = "Montreal",
                            Population = 1780000,
                            ProvinceCode = "QC"
                        },
                        new
                        {
                            CityId = 13,
                            CityName = "Quebec City",
                            Population = 531902,
                            ProvinceCode = "QC"
                        },
                        new
                        {
                            CityId = 14,
                            CityName = "Laval",
                            Population = 422993,
                            ProvinceCode = "QC"
                        },
                        new
                        {
                            CityId = 15,
                            CityName = "Winnipeg",
                            Population = 749607,
                            ProvinceCode = "MB"
                        },
                        new
                        {
                            CityId = 16,
                            CityName = "Brandon",
                            Population = 48859,
                            ProvinceCode = "MB"
                        },
                        new
                        {
                            CityId = 17,
                            CityName = "Saskatoon",
                            Population = 273010,
                            ProvinceCode = "SK"
                        },
                        new
                        {
                            CityId = 18,
                            CityName = "Regina",
                            Population = 236481,
                            ProvinceCode = "SK"
                        },
                        new
                        {
                            CityId = 19,
                            CityName = "Halifax",
                            Population = 448544,
                            ProvinceCode = "NS"
                        },
                        new
                        {
                            CityId = 20,
                            CityName = "Moncton",
                            Population = 79470,
                            ProvinceCode = "NB"
                        },
                        new
                        {
                            CityId = 21,
                            CityName = "Fredericton",
                            Population = 63116,
                            ProvinceCode = "NB"
                        },
                        new
                        {
                            CityId = 22,
                            CityName = "St. John's",
                            Population = 110525,
                            ProvinceCode = "NL"
                        },
                        new
                        {
                            CityId = 23,
                            CityName = "Charlottetown",
                            Population = 36094,
                            ProvinceCode = "PE"
                        },
                        new
                        {
                            CityId = 24,
                            CityName = "Yellowknife",
                            Population = 20100,
                            ProvinceCode = "NT"
                        },
                        new
                        {
                            CityId = 25,
                            CityName = "Whitehorse",
                            Population = 25136,
                            ProvinceCode = "YT"
                        },
                        new
                        {
                            CityId = 26,
                            CityName = "Iqaluit",
                            Population = 7740,
                            ProvinceCode = "NU"
                        });
                });

            modelBuilder.Entity("CommunityApp.Models.Province", b =>
                {
                    b.Property<string>("ProvinceCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceCode");

                    b.ToTable("Provinces", (string)null);

                    b.HasData(
                        new
                        {
                            ProvinceCode = "BC",
                            ProvinceName = "British Columbia"
                        },
                        new
                        {
                            ProvinceCode = "ON",
                            ProvinceName = "Ontario"
                        },
                        new
                        {
                            ProvinceCode = "AB",
                            ProvinceName = "Alberta"
                        },
                        new
                        {
                            ProvinceCode = "QC",
                            ProvinceName = "Quebec"
                        },
                        new
                        {
                            ProvinceCode = "MB",
                            ProvinceName = "Manitoba"
                        },
                        new
                        {
                            ProvinceCode = "SK",
                            ProvinceName = "Saskatchewan"
                        },
                        new
                        {
                            ProvinceCode = "NS",
                            ProvinceName = "Nova Scotia"
                        },
                        new
                        {
                            ProvinceCode = "NB",
                            ProvinceName = "New Brunswick"
                        },
                        new
                        {
                            ProvinceCode = "NL",
                            ProvinceName = "Newfoundland and Labrador"
                        },
                        new
                        {
                            ProvinceCode = "PE",
                            ProvinceName = "Prince Edward Island"
                        },
                        new
                        {
                            ProvinceCode = "NT",
                            ProvinceName = "Northwest Territories"
                        },
                        new
                        {
                            ProvinceCode = "YT",
                            ProvinceName = "Yukon"
                        },
                        new
                        {
                            ProvinceCode = "NU",
                            ProvinceName = "Nunavut"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CommunityApp.Models.City", b =>
                {
                    b.HasOne("CommunityApp.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunityApp.Models.Province", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
